<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R | Webpage of Byoung-gyu Gong</title>
    <link>/category/r/</link>
      <atom:link href="/category/r/index.xml" rel="self" type="application/rss+xml" />
    <description>R</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Sat, 03 Oct 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>R</title>
      <link>/category/r/</link>
    </image>
    
    <item>
      <title>Temporal network simulation: Albert-Barabasi model</title>
      <link>/post/temporal-network-simulation-albert-barabasi-model/</link>
      <pubDate>Sat, 03 Oct 2020 00:00:00 +0000</pubDate>
      <guid>/post/temporal-network-simulation-albert-barabasi-model/</guid>
      <description>


&lt;p&gt;&lt;img src=&#34;/post/2020-10-03-temporal-network-simulation-albert-barabasi-model.en_files/example961.png&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;theory&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Theory&lt;/h1&gt;
&lt;p&gt;Albert-Barabasi model is well-known network generation method, adding new vertices at each time steps. The connections added to the existing vertices at each time are proportional to the degree of the given vertice. The generated network shows the rich-get-richer phenomenon in the networked world as new connection tends to increase proportional to the previous degree.&lt;/p&gt;
&lt;p&gt;The master equation is as follows:
&lt;span class=&#34;math display&#34;&gt;\[
P[i] ~ k[i]^a + b
\]&lt;/span&gt;
where k[i] is the in-degree of vertex i in the current time, a is an exponent to create a power-law distribution, and b is attractiveness of the vertices with no degree.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;r-script&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;R script&lt;/h1&gt;
&lt;div id=&#34;albert-barabasi-network-creation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Albert-Barabasi network creation&lt;/h2&gt;
&lt;p&gt;We can create the Albert-Barabasi network data set using “sample_pa” function in igraph package. 100 means the number of vertices to create, power=3 is the ‘a’ in the above formula, and m is the number of edges to add for each time step.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;A&amp;lt;-sample_pa(100, power=3, m=2, directed=FALSE, algorithm = &amp;quot;psumtree&amp;quot;)
A&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## IGRAPH c57fd28 U--- 100 197 -- Barabasi graph
## + attr: name (g/c), power (g/n), m (g/n), zero.appeal (g/n), algorithm
## | (g/c)
## + edges from c57fd28:
##  [1]  1-- 2  1-- 3  2-- 3  1-- 4  2-- 4  2-- 5  4-- 5  2-- 6  4-- 6  2-- 7
## [11]  4-- 7  2-- 8  1-- 8  4-- 9  2-- 9  2--10  5--10  4--11  2--11 11--12
## [21]  2--12  2--13 12--13  4--14  2--14  2--15  1--15  4--16  2--16  2--17
## [31]  5--17  4--18  2--18  4--19  2--19  2--20  4--20  2--21  4--21  4--22
## [41]  2--22  2--23  4--23  4--24  2--24  2--25  4--25  2--26  4--26  2--27
## [51]  4--27  4--28  2--28  2--29  4--29  4--30  2--30  2--31  4--31  2--32
## [61]  4--32  2--33  4--33  2--34  4--34  2--35  4--35  2--36  4--36  2--37
## + ... omitted several edges&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above network data object does not include any information on the time step as an edge attribute (we need information on when the given edge will be added to generate the network). So, we need to create a time step information and merge it to the network data object A.&lt;/p&gt;
&lt;p&gt;T is the vector of the time step. The reason why the same number repeats twice is that we modeled the network to add 2 edges per each time step.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;T&amp;lt;-rep(x=seq(2,99), each=2)
T&amp;lt;-append(1,T)
T&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   [1]  1  2  2  3  3  4  4  5  5  6  6  7  7  8  8  9  9 10 10 11 11 12 12 13 13
##  [26] 14 14 15 15 16 16 17 17 18 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 26
##  [51] 26 27 27 28 28 29 29 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38
##  [76] 39 39 40 40 41 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 50 51
## [101] 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 61 62 62 63 63
## [126] 64 64 65 65 66 66 67 67 68 68 69 69 70 70 71 71 72 72 73 73 74 74 75 75 76
## [151] 76 77 77 78 78 79 79 80 80 81 81 82 82 83 83 84 84 85 85 86 86 87 87 88 88
## [176] 89 89 90 90 91 91 92 92 93 93 94 94 95 95 96 96 97 97 98 98 99 99&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, we can merge the time step data into the network data. Now, we can find “time (e/n)” in the igraph object, which means that the time step information is now assigned as an edge attribute.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;E(A)$time&amp;lt;-T
V(A)$name&amp;lt;-V(A)
A&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## IGRAPH c57fd28 UN-- 100 197 -- Barabasi graph
## + attr: name (g/c), power (g/n), m (g/n), zero.appeal (g/n), algorithm
## | (g/c), name (v/n), time (e/n)
## + edges from c57fd28 (vertex names):
##  [1]  1-- 2  1-- 3  2-- 3  1-- 4  2-- 4  2-- 5  4-- 5  2-- 6  4-- 6  2-- 7
## [11]  4-- 7  2-- 8  1-- 8  4-- 9  2-- 9  2--10  5--10  4--11  2--11 11--12
## [21]  2--12  2--13 12--13  4--14  2--14  2--15  1--15  4--16  2--16  2--17
## [31]  5--17  4--18  2--18  4--19  2--19  2--20  4--20  2--21  4--21  4--22
## [41]  2--22  2--23  4--23  4--24  2--24  2--25  4--25  2--26  4--26  2--27
## [51]  4--27  4--28  2--28  2--29  4--29  4--30  2--30  2--31  4--31  2--32
## [61]  4--32  2--33  4--33  2--34  4--34  2--35  4--35  2--36  4--36  2--37
## + ... omitted several edges&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following script was directly copied from the blog of Dr. Esteban Moro &lt;a href=&#34;http://estebanmoro.org/post/2015-12-21-temporal-networks-with-r-and-igraph-updated/&#34; class=&#34;uri&#34;&gt;http://estebanmoro.org/post/2015-12-21-temporal-networks-with-r-and-igraph-updated/&lt;/a&gt;. You should set the right directory before implementing the below chunk of codes as it creates 100 pages of image in the directory folder.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#this version of the script has been tested on igraph 1.0.1
#load libraries
require(igraph,RcolorBrewer)
install.packages(&amp;quot;RColorBrewer&amp;quot;)
library(RColorBrewer)
#generate a cool palette for the graph (darker colors = older nodes)
YlOrBr.pal &amp;lt;- colorRampPalette(brewer.pal(8,&amp;quot;YlOrRd&amp;quot;))
#colors for the nodes are chosen from the very beginning
V(A)$color &amp;lt;- rev(YlOrBr.pal(vcount(A)))[as.numeric(V(A)$name)]

#time in the edges goes from 1 to 300. We kick off at time 3
ti &amp;lt;- 2
#remove edges which are not present
gt &amp;lt;- delete_edges(A,which(E(A)$time &amp;gt; ti))
# Generate first layout using graphopt with normalized coordinates. 
# This places the initially connected set of nodes in the middle. 
# If you use fruchterman.reingold it will place that initial set in the outer ring.
layout.old &amp;lt;- norm_coords(layout.graphopt(gt), 
                          xmin = -1, xmax = 1, ymin = -1, ymax = 1)
#total time of the dynamics
total_time &amp;lt;- max(E(A)$time)
#This is the time interval for the animation. In this case is taken to be 1/10
#of the time (i.e. 10 snapshots) between adding two consecutive nodes
dt &amp;lt;- 0.1
#Output for each frame will be a png with HD size 1600x900 :)
png(file=&amp;quot;example%03d.png&amp;quot;, width=1600,height=900)
#Time loop starts
for(time in seq(3,total_time,dt)){
  #remove edges which are not present
  gt &amp;lt;- delete_edges(A,which(E(A)$time &amp;gt; time))
  #with the new graph, we update the layout a little bit
  layout.new &amp;lt;- layout_with_fr(gt,coords=layout.old,niter=10,start.temp=0.05,grid=&amp;quot;nogrid&amp;quot;)
  #plot the new graph
  plot(gt,layout=layout.new,
       vertex.label=&amp;quot;&amp;quot;,vertex.size=1+2*log(degree(gt)),
       vertex.frame.color=V(A)$color,edge.width=1.5,
       asp=9/16,margin=-0.15)
  #use the new layout in the next round
  layout.old &amp;lt;- layout.new
}
dev.off()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once you created the png image files of the network for each time step, then you can create an animation using “ffmpeg” application. If you already installed ‘brew’ in your computer, then you can easily install the “ffmpeg” with very short code like this in your terminal:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;$ brew install ffmpeg&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, you can create an network animation with the following code in your terminal:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ffmpeg -r 10 -i example%03d.png -b:v 20M output.mp4&lt;/code&gt;&lt;/pre&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/ePzu6xg975I&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Hello R Markdown</title>
      <link>/post/2015-07-23-r-rmarkdown/</link>
      <pubDate>Thu, 23 Jul 2015 21:13:14 -0500</pubDate>
      <guid>/post/2015-07-23-r-rmarkdown/</guid>
      <description>


&lt;div id=&#34;r-markdown&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;R Markdown&lt;/h1&gt;
&lt;p&gt;This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see &lt;a href=&#34;http://rmarkdown.rstudio.com&#34; class=&#34;uri&#34;&gt;http://rmarkdown.rstudio.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can embed an R code chunk like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(cars)
##      speed           dist       
##  Min.   : 4.0   Min.   :  2.00  
##  1st Qu.:12.0   1st Qu.: 26.00  
##  Median :15.0   Median : 36.00  
##  Mean   :15.4   Mean   : 42.98  
##  3rd Qu.:19.0   3rd Qu.: 56.00  
##  Max.   :25.0   Max.   :120.00
fit &amp;lt;- lm(dist ~ speed, data = cars)
fit
## 
## Call:
## lm(formula = dist ~ speed, data = cars)
## 
## Coefficients:
## (Intercept)        speed  
##     -17.579        3.932&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;including-plots&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Including Plots&lt;/h1&gt;
&lt;p&gt;You can also embed plots. See Figure &lt;a href=&#34;#fig:pie&#34;&gt;1&lt;/a&gt; for example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;par(mar = c(0, 1, 0, 1))
pie(
  c(280, 60, 20),
  c(&amp;#39;Sky&amp;#39;, &amp;#39;Sunny side of pyramid&amp;#39;, &amp;#39;Shady side of pyramid&amp;#39;),
  col = c(&amp;#39;#0292D8&amp;#39;, &amp;#39;#F7EA39&amp;#39;, &amp;#39;#C4B632&amp;#39;),
  init.angle = -50, border = NA
)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:pie&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/post/2015-07-23-r-rmarkdown_files/figure-html/pie-1.png&#34; alt=&#34;A fancy pie chart.&#34; width=&#34;672&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 1: A fancy pie chart.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
